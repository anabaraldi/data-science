setwd("~/workspace/verios/verios-r")
source('~/workspace/verios/verios-r/lib/total_overview.R', echo=TRUE)
clients
wallet_id <- clients$wallet_id[1]
wallet_id
trades <- get_trades(wallet_id)
trades
url <- ifelse(is.null(wallet_id),
paste0(path, "/admin/trades"),
paste0(path, "/admin/wallets/", wallet_id, "/trades"))
url
clients
source('lib/source.R')
library(dplyr)
library(ggplot2)
xp_code <-  "360842"
cat(xp_code, "\n")
wallet_id <- get_wallet_id_by_xpcode(xp_code)
open_request <- get_first_request(wallet_id)$open_date
most_updated <- FALSE #broked because yield
position <- calc_position(wallet_id, by_class=FALSE, melted=FALSE, most_updated)
position <- dplyr::select(position, -cash)
dates <- position$dates
order <- names(position)
period <- list(start=min(dates), end=max(dates) + days(1))
## Asset Profit
asset_profit <- sapply(position[-1], function(x) {
for(i in length(x):2) {
x[i] <- x[i] - x[i-1]
}
x
})
asset_profit <- data.frame(dates, asset_profit)
trades <- get_trades(wallet_id)
max_trade_date <- max(trades$trade_date) # To be used to remove if has trade on last day
trades$treasury_fee_date <- as.Date(mapply(function(d, t) {
dates[which(d == dates) + ifelse(t == "sell", 1, 3)]
}, trades$trade_date, trades$type), origin="1970-01-01")
trades <- split(trades, trades$asset_id)
## Quantity
quantity <- sapply(dates, function(d) {
unlist(lapply(trades, function(t) {
t <- filter(t, treasury_fee_date <= d)
sum(t$quantity)
}))
})
quantity <- t(quantity)
## Invested
invested <- lapply(trades, function(t) {
x <- aggregate(I(gross * signal) ~ trade_date + asset_id, t, sum)
names(x)[3] <- "gross"
x
})
invested <- Reduce(function(...) merge(..., all=T), invested) %>%
tidyr::spread(asset_id, gross, fill=0) %>%
dplyr::rename(dates=trade_date) %>%
full_join(data.frame(dates), by="dates") %>%
arrange(dates) # %>%
invested[is.na(invested)] <- 0
invested <- invested[match(order, names(invested))]
## Yield
daily_event <- sapply(order[-1], function(each_asset) {
x <- getDaily(each_asset, period)
output <- if("e" %in% names(x)) {
x[!sapply(x$e, is.null),]
} else {
NULL
}
})
yield <- lapply(daily_event, function(asset_event) {
if(is.null(asset_event)) {
rep(0, length(dates))
} else {
x <- rep(0, length(dates))
x[dates %in% asset_event$d] <- Reduce(function(...) merge(..., all=T), asset_event$e)$v
x
}
})
yield <- do.call(cbind, yield)
yield <- yield * quantity
## Transaction Fee
transaction_fee <- lapply(trades, function(t) {
aggregate(fee ~ trade_date + asset_id, t, sum)
})
transaction_fee <- Reduce(function(...) merge(..., all=T), transaction_fee) %>%
tidyr::spread(asset_id, fee, fill=0) %>%
dplyr::rename(dates=trade_date) %>%
full_join(data.frame(dates), by="dates") %>%
arrange(dates) # %>%
transaction_fee[is.na(transaction_fee)] <- 0
transaction_fee <- transaction_fee[match(order, names(transaction_fee))]
## Broker fee
transactions <- get_transactions(wallet_id)
broker_fee <- filter(transactions, type=="fee") %>%
filter(grepl("MANUTENÇÃO", description) | grepl("FALHA NA OPERAÇÃO", description)) %>%
dplyr::rename(date = trade_date) %>%
mutate(base_date = date - months(1)) %>%
mutate(base_year = year(base_date)) %>%
mutate(base_month = month(base_date)) %>%
dplyr::select(value, base_year, base_month)
if(nrow(broker_fee) > 0) {
broker_fee <- aggregate(value ~ base_year + base_month, broker_fee, sum)
broker_fee <- sapply(1:nrow(broker_fee), function(i) {
fee <- broker_fee[i, ]
valid_dates <- year(dates) == fee$base_year & month(dates) == fee$base_month
daily_fee <- fee$value / sum(valid_dates)
df <- data.frame(dates=dates, broker_fee=valid_dates * daily_fee)
df[valid_dates, ]
}, simplify=FALSE)
broker_fee <- Reduce(function(...) merge(..., all=T), broker_fee)
broker_fee <- full_join(data.frame(dates), broker_fee, by="dates") %>%
arrange(dates) # %>%
broker_fee[is.na(broker_fee)] <- 0
} else {
broker_fee <- data.frame(dates, broker_fee=0)
}
## Treasury fee
bond_quantity <- quantity * rep(get_asset_type(colnames(quantity)) == "bond", each=nrow(quantity))
dailies <- getAllDailies(names(trades), period, na.rm=F, quote="v")
if(any(!colnames(bond_quantity) == names(dailies[-1]))) { stop('Wrong column order') }
if(most_updated) {
dailies <- rbind(dailies, tail(dailies, 1))
dailies$d[nrow(dailies)] <- today()
dailies[nrow(dailies), -1] <- get_pu(names(dailies[-1]))
}
treasury_fee <- bond_quantity * dailies[-1]
treasury_fee <- treasury_fee * ((1.003^(1/365)) - 1)
treasury_fee <- data.frame(dates, treasury_fee)
dates_all <- seq(min(dates), max(dates), by="days")
dates_diff <- dates_all[!dates_all %in% dates]
treasury_fee <- full_join(treasury_fee, data.frame(dates=dates_diff), by="dates") %>%
arrange(dates)
treasury_fee[-1] <- sapply(treasury_fee[-1], function(x) {
count_na <- 0
for(i in nrow(treasury_fee):1) {
if(is.na(x[i])) {
count_na <- count_na + 1
x[i] <- 0
} else {
x[i] <- x[i] * (1 +  count_na)
count_na <- 0
}
}
x
})
treasury_fee <- filter(treasury_fee, !dates %in% dates_diff)
## etf_fee
etf_fee <- data.frame(dates=dates)
if("pibb11" %in% names(position)) {
pibb11_fee <- position$pibb11 * .00059 / 252
asset_profit$pibb11 <- asset_profit$pibb11 + pibb11_fee
etf_fee <- cbind(etf_fee, pibb11=pibb11_fee)
}
if("ivvb11" %in% names(position)) {
ivvb11_fee <- position$ivvb11 * .0027 / 252
asset_profit$ivvb11 <- asset_profit$ivvb11 + ivvb11_fee
etf_fee <- cbind(etf_fee, ivvb11=ivvb11_fee)
}
verios_fee <- apply(position[-1], 1, sum) * .0095 / 252 -
apply(transaction_fee[-1], 1, sum) -
apply(broker_fee[-1], 1, sum) -
apply(treasury_fee[-1], 1, sum) -
apply(etf_fee[-1], 1, sum)
if(any(!names(invested) %in% order)) { stop('Wrong Column') }
if(any(!position$dates == invested$dates)) { stop('Wrong date') }
if(any(!position$dates == transaction_fee$dates)) { stop('Wrong date') }
if(any(!position$dates == broker_fee$dates)) { stop('Wrong date') }
if(any(!position$dates == treasury_fee$dates)) { stop('Wrong date') }
if(any(!position$dates == etf_fee$dates)) { stop('Wrong date') }
## Profit, at last
profit <- asset_profit[-1] - invested[-1] + yield
profit <- cbind(profit, transaction_fee=-apply(transaction_fee[-1], 1, sum))
profit <- cbind(profit, broker_fee[-1])
profit <- cbind(profit, treasury_fee=-apply(treasury_fee[-1], 1, sum))
profit <- cbind(profit, etf_fee=-apply(etf_fee[-1], 1, sum))
profit <- cbind(profit, verios_fee=verios_fee)
profit <- cbind(profit, total=apply(profit, 1, sum))
profit <- cbind(profit, cum_total=cumsum(profit$total))
profit <- cbind(d=dates, profit)
costs <- mutate(profit, asset_fee = etf_fee + treasury_fee) %>%
dplyr::select(d, transaction_fee, broker_fee, asset_fee, verios_fee)
valid <- round2(apply(position[-1], 1, sum)) > 0 & position$d >= open_request
valid[length(valid)] <- tail(valid, 1) & max_trade_date != tail(position$d, 1)
profit <- filter(profit, valid)
position <- filter(position, valid)
costs <- filter(costs, valid)
dates <- dates[valid]
daily_return <- profit$total / (apply(position[-1], 1, sum) - profit$total)
sd <- sd(daily_return) * sqrt(252)
cum <- cumprod(1 + daily_return)
profit$daily_return <- daily_return
profit$cum_daily_return <- cum
plan <- as.numeric(get_portfolio(wallet_id, TRUE)$label)
sum(profit$treasury_fee) + sum(profit$treasury_fee[-c(1:(nrow(profit) -5))]) * (as.numeric(as.Date("2015-12-31") - max(profit$d)) / 7) * (71/61)
setwd("~/workspace/data-science/Regression-Models")
install.packages("UsingR")
