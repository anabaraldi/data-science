library(Hmisc)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
library(Hmisc)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?cut2
cut_training <- cut2(training, g=4)
?featurePlot
ncol(training)
names(training)
training[-9]
head(training[-9])
featurePlot(training)
featurePlot(training, names(training))
featurePlot(training[-9], training[9], plot = "pairs")
cut_mixtures <- cut2(mixtures$CompressiveStrength, g=3)
cut_mixtures
?ggpairs
library(ggplot2)
?ggpairs
library(GGally)
install.packages("GGally")
library(GGally)
?ggpairs
training[-9][cutmixtures[1]]
training[-9][cut_mixtures[1]]
?grid.arrange
cut_mixtures <- cut2(mixtures$CompressiveStrength, g=3)
g <- featurePlot(training[-9][cut_mixtures[1]], training[9][cut_mixtures[1]], plot = "pairs")
g2 <- featurePlot(training[-9][cut_mixtures[2]], training[9][cut_mixtures[2]], plot = "pairs")
g3 <- featurePlot(training[-9][cut_mixtures[3]], training[9][cut_mixtures[3]], plot = "pairs")
grid.arrange(g1, g2, g3)
library(gridExtra)
training[-9][cut_mixtures[1]]
cut_mixtures
cut_mixtures <- cut2(mixtures$CompressiveStrength, g=3)
cut_mixtures <- data.frame(training, cut_mixtures)
cut_mixtures <- cut2(training$CompressiveStrength, g=3)
cut_mixtures <- data.frame(training, cut_mixtures)
cut_mixtures <- cut2(training$CompressiveStrength, g=3)
g <- featurePlot(training[-9][cut_mixtures[1]], training[9][cut_mixtures[1]], plot = "pairs")
g2 <- featurePlot(training[-9][cut_mixtures[2]], training[9][cut_mixtures[2]], plot = "pairs")
g3 <- featurePlot(training[-9][cut_mixtures[3]], training[9][cut_mixtures[3]], plot = "pairs")
grid.arrange(g1, g2, g3)
cut_mixtures <- data.frame(training, cut_mixtures)
cut_mixtures
cut_mixtures <- cut2(training$CompressiveStrength, g=3)
index_cut_mixtures <- cut2(training$CompressiveStrength, g=3)
filter(cut_mixtures, index_cut_mixtures == index_cut_mixtures[1])[-9]
cut_mixtures
index_cut_mixtures <- cut2(training$CompressiveStrength, g=3)
cut_mixtures <- data.frame(training, index_cut_mixtures)
cut_mixtures
filter(cut_mixtures, index_cut_mixtures == index_cut_mixtures[1])[-9]
cut_mixtures <- cut2(training$CompressiveStrength, g=3)
complete_df <- data.frame(training, cut_mixtures)
complete_df <- melt(complete_df, cut_mixtures)
library(reshape2
)
cut_mixtures <- cut2(training$CompressiveStrength, g=3)
complete_df <- data.frame(training, cut_mixtures)
complete_df <- melt(complete_df, cut_mixtures)
cut_mixtures <- cut2(training$CompressiveStrength, g=3)
cut_mixtures
complete_df <- data.frame(training, cut_mixtures)
complete_df
names(complete_df)
cut_mixtures <- cut2(training$CompressiveStrength, g=3)
complete_df <- data.frame(training, cut_mixtures)
complete_df <- melt(complete_df, "cut_mixtures")
complete_df
ggplot(training, aes(age, colour = cut_mixtures)) + geom_boxplot()
names(training)
ggplot(training, aes(Age, colour = cut_mixtures)) + geom_boxplot()
ggplot(training, aes(Age, cut_mixtures, colour = cut_mixtures)) + geom_boxplot()
ggplot(training, aes(Age, CompressiveStrength, colour = cut_mixtures)) + geom_boxplot()
?concrete
ggplot(training, aes(Age, CompressiveStrength, fill = cut_mixtures)) + geom_boxplot()
ggplot(training, aes(CompressiveStrength, Age, fill = cut_mixtures)) + geom_boxplot()
ggplot(training, aes(CompressiveStrength, Age, colour = cut_mixtures)) + geom_point()
ggplot(training, aes(CompressiveStrength, FlyAsh, colour = cut_mixtures)) + geom_point()
featurePlot(training[-9], training[9])
featurePlot(training[-9], training[9], "pairs")
ggplot(training, aes(CompressiveStrength, Cement, colour = cut_mixtures)) + geom_point()
ggplot(training, aes(CompressiveStrength, FlyAsh, colour = cut_mixtures)) + geom_point()
histogram(training$Superplasticizer)
ggplot(training, aes(Superplasticizer)) + geom_density()
histogram(training$Superplasticizer, break=100)
histogram(training$Superplasticizer, breaks=100)
histogram(training$Superplasticizer, breaks=50)
histogram(log(training$Superplasticizer), breaks=50)
histogram(log(training$Superplasticizer + 1), breaks=50)
table(training$Superplasticizer)
table(round(training$Superplasticizer))
table(round(training$Superplasticizer, 3))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433) data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
head(training)
dplyr::select(training, diagnosis, matches(".IL."))
dplyr::select(training, diagnosis, matches("IL."))
selected_cols <- dplyr::select(training, diagnosis, matches("IL."))
names(selescted_cols)
names(selected_cols)
selected_cols <- dplyr::select(training, diagnosis, matches("\\IL\\"))
selected_cols <- dplyr::select(training, diagnosis, matches("\\IL"))
names(selected_cols)
selected_cols <- dplyr::select(training, diagnosis, matches("\\.IL"))
names(selected_cols)
selected_cols <- dplyr::select(training, diagnosis, matches("IL"))
names(selected_cols)
selected_cols <- dplyr::select(training, diagnosis, matches("\\IL\\"))
selected_cols <- dplyr::select(training, diagnosis, matches("\\IL."))
names(selected_cols)
selected_cols <- dplyr::select(training, diagnosis, matches("\\IL."), -TRAIL_R3)
names(selected_cols)
selected_cols <- dplyr::select(training, diagnosis, matches("\\.IL"))
preProcess(selected_cols[-1], method("pca"), thresh=0.9)
selected_cols <- dplyr::select(training, diagnosis, matches("\\.IL"))
preProcess(selected_cols[-1], method="pca", thresh=0.9)
preProc <- preProcess(selected_cols[-1], method="pca", pcaComp=9)
predict(preProc, selected_cols[-1])
selected_cols
selected_cols <- dplyr::select(training, diagnosis, matches("\\.IL"))
preProc <- preProcess(selected_cols[-1], method="pca", pcaComp=9)
selected_cols
head(selected_cols)
training
dplyr::select(training, diagnosis, matches("\\.IL"))
selected_cols <- dplyr::select(training, diagnosis, matches("\\IL."), -TRAIL_R3)
selected_cols
selected_cols <- dplyr::select(training, diagnosis, matches("\\.IL"))
preProc <- preProcess(selected_cols[-1], method="pca", pcaComp=9)
predict(preProc, selected_cols[-1])
selected_cols <- dplyr::select(training, diagnosis, matches("\\IL."), -TRAIL_R3)
preProc <- preProcess(selected_cols[-1], method="pca", pcaComp=9)
predict(preProc, selected_cols[-1])
selected_cols <- dplyr::select(training, diagnosis, matches("\\IL."), -TRAIL_R3)
preProc <- preProcess(selected_cols[-1], method="pca", pcaComp=9)
trainPC <- predict(preProc, selected_cols[-1])
modelFit <- train(training$diagnosis ~ ., method="glm", data = trainPC)
modelFit
selected_cols <- dplyr::select(training, diagnosis, matches("\\IL."), -TRAIL_R3)
preProc <- preProcess(selected_cols[-1], method="pca", thresh = 0.9)
trainPC <- predict(preProc, selected_cols[-1])
modelFit <- train(training$diagnosis ~ ., method="glm", data = trainPC)
modelFit
selected_cols <- dplyr::select(training, diagnosis, matches("\\IL."), -TRAIL_R3)
preProc <- preProcess(selected_cols[-1], method="pca", thresh = 0.8)
trainPC <- predict(preProc, selected_cols[-1])
modelFitPC <- train(training$diagnosis ~ ., method="glm", data = trainPC)
modelFit <- train(training$diagnosis ~ ., method="glm", data = selected_cols)
modelFit
modelFitPC
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
selected_cols <- dplyr::select(training, diagnosis, matches("\\IL."), -TRAIL_R3)
preProc <- preProcess(selected_cols[-1], method="pca", thresh = 0.8)
trainPC <- predict(preProc, selected_cols[-1])
modelFitPC <- train(training$diagnosis ~ ., method="glm", data = trainPC)
modelFit <- train(training$diagnosis ~ ., method="glm", data = selected_cols)
modelFit
modelFitPC
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
selected_cols <- dplyr::select(training, diagnosis, matches("\\IL."), -TRAIL_R3)
preProc <- preProcess(selected_cols[-1], method="pca", thresh = 0.8)
trainPC <- predict(preProc, selected_cols[-1])
modelFitPC <- train(training$diagnosis ~ ., method="glm", data = trainPC)
modelFit <- train(training$diagnosis ~ ., method="glm", data = selected_cols)
modelFit
modelFitPC
selected_cols
modelFitPC
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train <- vowel.train %>% mutate(y = factor(y))
vowel.test <- vowel.test %>% mutate(y = factor(y))
set.seed(33833)
fit1 <- train(y ~ ., method = "rf", data=vowel.train)
fit2 <- train(y ~ ., method = "gbm", data=vowel.train)
library(ElemStatLearn)
library(caret)
library(dplyr)
data(vowel.train)
data(vowel.test)
vowel.train <- vowel.train %>% mutate(y = factor(y))
vowel.test <- vowel.test %>% mutate(y = factor(y))
set.seed(33833)
fit1 <- train(y ~ ., method = "rf", data=vowel.train)
fit2 <- train(y ~ ., method = "gbm", data=vowel.train)
fit1
fit2
names(fit1)
fit1$finalModel
fit1
fit2
fit_rf <- train(y ~ ., method = "rf", data=vowel.train)
fit_gbm <- train(y ~ ., method = "gbm", data=vowel.train)
pred_rf <- predict(fit_rf, vowel.test)
pred_gbm <- predict(fit_gbm, vowel.test)
pred_rf
vowel.test$y
table(pred_rf, vowel.test$y)
?accuracy
?missClass
install.packages("forecast")
library(forecast)
accuracy(pred_rf, vowel.test$y)
?accuracy
accuracy(as.numeric(pred_rf), vowel.test$y)
accuracy(as.numeric(pred_rf), as.numeric(vowel.test$y))
?traun
?train
?confusionMatrix
vowel.train
head(vowel.train)
fit_rf <- train(y ~ ., method = "rf", data=vowel.train)
fit_rf
pred_rf <- predict(fit_rf, vowel.test)
pred_rf
pred_rf == vowel.test$y
mean(pred_rf == vowel.test$y)
fit_gbm <- train(y ~ ., method = "gbm", data=vowel.train)
pred_gbm <- predict(fit_gbm, vowel.test)
mean(pred_gbm == vowel.test$y)
pred_df <- data.frame(pred_rf, pred_gbm, y = vowel.test$y)
fit_total <- train(y ~ ., method="gam", data=pred_df)
pred_total <- predict(fit_total, pred_df)
mean(pred_total == vowel.test$y)
pred_rf <- predict(fit_rf, vowel.train)
pred_gbm <- predict(fit_gbm, vowel.train)
pred_df <- data.frame(pred_rf, pred_gbm, y = vowel.train$y)
fit_total <- train(y ~ ., method="gam", data=pred_df)
pred_total <- predict(fit_total, pred_df)
mean(pred_rf == vowel.test$y)
# Week four
# Quiz
library(ElemStatLearn)
library(caret)
library(dplyr)
data(vowel.train)
data(vowel.test)
vowel.train <- vowel.train %>% mutate(y = factor(y))
vowel.test <- vowel.test %>% mutate(y = factor(y))
set.seed(33833)
fit_rf <- train(y ~ ., method = "rf", data=vowel.train)
pred_rf <- predict(fit_rf, vowel.train)
pred_gbm <- predict(fit_gbm, vowel.train)
pred_rf
pred_gbm
pred_rf <- predict(fit_rf, vowel.train)
cat("accuracy rf:", mean(pred_rf == vowel.train$y), "\n")
pred_gbm <- predict(fit_gbm, vowel.train)
cat("accuracy gbm:", mean(pred_gbm == vowel.train$y), "\n")
plot(pred_rf, fit_rf$y)
plot(pred_rf, vowel.trainf$y)
plot(pred_rf, vowel.train$y)
vowel.train$y
pred_rf == vowel.train$y
pred_rf
summary(pred_rf)
summary(fit_rf)
fit_rf
fit_total
fit_rf
fit_rf <- train(y ~ ., method = "rf", data=vowel.train)
fit_rf
mean(pred_rf == pred_gbm)
fit_rf <- train(y ~ ., method = "rf", data=vowel.train)
fit_gbm <- train(y ~ ., method = "gbm", data=vowel.train)
pred_rf <- predict(fit_rf, vowel.test)
cat("accuracy rf:", mean(pred_rf == vowel.test$y), "\n")
pred_gbm <- predict(fit_gbm, vowel.test)
cat("accuracy gbm:", mean(pred_gbm == vowel.test$y), "\n")
mean(pred_rf == pred_gbm)
confusionMatrix(pred_rf, vowel.test$y)$overall[1]
predDF <- data.frame(pred_rf, pred_gbm, y = vowel.test$y)
# Accuracy among the test set samples where the two methods agree
sum(pred_rf[predDF$pred_rf == predDF$pred_gbm] ==
predDF$y[predDF$pred_rf == predDF$pred_gbm]) /
sum(predDF$pred_rf == predDF$pred_gbm)
Sys.getlocale()
pwd()
install.packages('Rsymphony')
install.packages('Rsymphony')
install.packages('Rsymphony')
install.packages('Rsymphony')
setwd("~/workspace/data-science/Data-Products/assignment/assignment_presentation")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
browseURL("index.html")
publish_github("anabaraldi", "data-products-presentation")
publish_github("anabaraldi", "data-products-assignment")
publish(title = 'Bikes in SP Dataset', 'index.html', host = 'rpubs')
publish(title = 'Bikes in SP Dataset', 'index.html', host = 'rpubs')
author("presentation")
setwd("~/workspace/data-science/Data-Products/assignment")
author("presentation")
slidify("index.Rmd")
browseURL("index.html")
publish(title = 'Bikes in SP Dataset', 'index.html', host = 'rpubs')
publish(title = 'Bikes in SP Dataset', 'index.html', host = 'rpubs')
